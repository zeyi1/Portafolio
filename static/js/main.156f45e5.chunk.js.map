{"version":3,"sources":["images/avatar.png","images/Isla.jpg","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Particle","lazy","Typed","useStyles","makeStyles","theme","avatar","width","spacing","height","margin","title","fontSize","fontWeight","paddingBottom","color","breakpoints","down","test","backgroundColor","subtitle","textAlign","padding","typedContainer","position","top","left","transform","zIndex","backImage","backgroundImage","isla","backgroundPosition","MozBackgroundSize","WebkitBackgroundSize","OBackgroundSize","backgroundRepeat","button","boxShadow","background","Header","useState","animation","setAnimation","classes","Box","className","id","Grid","container","xs","justify","style","Avatar","src","alt","fallback","direction","Typography","fontFamily","strings","typeSpeed","startDelay","showCursor","map","item","Button","onClick","NavigationBar","Timeline","Projects","Contact","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.156f45e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.53b45d96.png\";","module.exports = __webpack_public_path__ + \"static/media/Isla.209a8dd8.jpg\";","import React, {useState, lazy, Suspense} from 'react';\r\nimport '../App.css';\r\nimport {Typography, Avatar, Grid, Box, Button} from '@material-ui/core';\r\nimport avatar from '../images/avatar.png';\r\n// import Typed from 'react-typed';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport isla from '../images/Isla.jpg';\r\n// import Particle from './Particle';\r\n\r\nconst Particle = lazy(() => import('./Particle'))\r\nconst Typed = lazy(() => import('react-typed'))\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n    avatar: {\r\n        width: theme.spacing(15),\r\n        height: theme.spacing(15),\r\n        margin: theme.spacing(1)\r\n    },\r\n    title: {\r\n        fontSize: '30px',\r\n        fontWeight: 'bold',\r\n        paddingBottom: '30px',\r\n        color: '#b5b4df',\r\n        [theme.breakpoints.down('xs')]:{\r\n            fontSize: '24px'\r\n        }\r\n    },\r\n    test:{\r\n        backgroundColor: 'rgba(0,0,0,0.7)' \r\n    },\r\n    subtitle: {\r\n        fontSize: '21px',\r\n        color: '#e6c0d4',\r\n        [theme.breakpoints.down('sm')]:{\r\n            textAlign: 'left',\r\n            padding: '0px 20px 15px 20px'\r\n        }\r\n    },\r\n    typedContainer: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: \"translate(-50%, -50%)\",\r\n        width: '60vw',\r\n        textAlign: 'center',\r\n        zIndex: 1,\r\n        [theme.breakpoints.down('md')]:{\r\n            width: '80vw'\r\n        },\r\n        [theme.breakpoints.down('sm')]:{\r\n            width: '90vw'\r\n        }\r\n    },\r\n\r\n    backImage: {\r\n        backgroundImage: `linear-gradient(to top left, rgba(0,0,0,0.1) 0%,rgba(0,0,0,0.2) 100%), url(${isla})`,\r\n        width: '100%',\r\n        height: '100vh',\r\n        backgroundPosition: 'center',\r\n        MozBackgroundSize: 'cover',\r\n        WebkitBackgroundSize: 'cover',\r\n        OBackgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        \r\n    },\r\n    button:{\r\n        zIndex: 1,\r\n        top: '93vh',\r\n        // backgroundColor: '#abcbfe',\r\n        boxShadow: '0 0 5px 5px rgba(84,131,205, 0.7)',\r\n        background: '#2C68C6',\r\n        '&:hover':{\r\n            backgroundColor: 'rgba(41,104,238, 0.8)'\r\n        }\r\n    },\r\n    \r\n}))\r\n\r\n\r\nconst Header = () => {\r\n    \r\n    const [animation, setAnimation] = useState(false)\r\n    \r\n    const classes = useStyles()\r\n    \r\n    const title = \"Hi! I'm Zeyi, a Web / Software Developer.\"\r\n    const text = [[\"I have a passion for creating simplified and optimized software applications that solve real-world problems.\", 4000],\r\n                  ['I have experience in front-end and back-end design, machine learning and artificial intelligence, and building automated applications.', 9000],\r\n                  [\"I'm an introvert who loves learning new technologies, games and animes.\", 15000]]\r\n\r\n    return (\r\n        <>\r\n            <Box className={classes.backImage} id='about'>\r\n                \r\n                <Box className={classes.typedContainer}>\r\n\r\n                    <Grid container xs={12} justify='center' style={{paddingBottom: '40px'}}>\r\n                        <Avatar className={classes.avatar} src = {avatar} alt='Sharingan One Tomoe'/>\r\n                    </Grid>\r\n\r\n                    <Suspense fallback={<div />}>\r\n                        <Grid container xs={12}direction='column' className={classes.test}>\r\n                            <Typography className={classes.title} style={{fontFamily: \"'Kaushan Script', cursive\"}}>\r\n\r\n                                <Typed strings={[title]} typeSpeed={40} startDelay={1000} showCursor={false}/>\r\n                            </Typography>\r\n                            \r\n                            {text.map(item => (\r\n                                <Grid item>\r\n                                    <Typography className={classes.subtitle} style={{fontFamily:\"'Harmattan', sans-serif\"}}>\r\n                                        <Typed strings={[item[0]]} typeSpeed={30} startDelay={item[1]} showCursor={false}/>\r\n                                    </Typography>\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid> \r\n                    </Suspense>\r\n                    \r\n                </Box>\r\n                <Suspense fallback={<div />}>\r\n                    <Grid container justify='center'>\r\n                        <Button className={classes.button} style={{fontFamily: \"'Caveat', cursive\"}} onClick={() => setAnimation(!animation)}>Animate</Button>\r\n                        {animation ? <Particle /> : <></>}\r\n                    </Grid>\r\n                </Suspense>\r\n                \r\n            </Box>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {Suspense, lazy} from 'react';\r\nimport './App.css';\r\n// import NavigationBar from './components/NavigationBar';\r\n// import Footer from './components/Footer';\r\nimport Header from './components/Header';\r\n// import Timeline from './components/Timeline';\r\n// import Contact from './components/Contact';\r\n// import Projects from './components/Projects';\r\n\r\nconst NavigationBar = lazy(() => import('./components/NavigationBar'));\r\nconst Timeline = lazy(() => import('./components/Timeline'));\r\nconst Projects = lazy(() => import('./components/Projects'));\r\nconst Contact = lazy(() => import('./components/Contact'));\r\nconst Footer = lazy(() => import('./components/Footer'));\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n      <div className='appRoot'>\r\n        {/* <CssBaseline/> */}\r\n        <Suspense fallback={<div />}>\r\n          <NavigationBar />\r\n        </Suspense>\r\n        \r\n        <Header />\r\n\r\n        <Suspense fallback={<div />}>\r\n          <Timeline /> \r\n        </Suspense>\r\n        \r\n        <Suspense fallback={<div />}>\r\n          <Projects />\r\n        </Suspense>\r\n        \r\n        <Suspense fallback={<div />}>\r\n          <Contact />\r\n        </Suspense>\r\n        \r\n        <Suspense fallback={<div />}>\r\n          <Footer />\r\n        </Suspense>\r\n        \r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { CssBaseline } from '@material-ui/core';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}